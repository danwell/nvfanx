#!/usr/bin/python3

#    nvfanx - nVidia GPU fan control Daemon
#    Copyright (C) 2012 David Newell

#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os
import sys
import subprocess
import time
import signal

###############################################################################
## GPU FAN CONTROL GET/SET FUNCTIONS
###############################################################################

def getGPUFanControlEnabled(display):
	nvproc = subprocess.Popen(("nvidia-settings", "--ctrl-display", display, "-q", "[gpu:0]/GPUFanControlState", "-t"),stdout=subprocess.PIPE)
	output = nvproc.stdout.readline()
	nvproc.wait()
	if nvproc.returncode != 0:
		raise Exception('Failed to obtain GPU Fan Control Enabled value')
	isEnabled = int(output)
	return isEnabled

def enableGPUFanControl(display):
	nvproc = subprocess.Popen(("nvidia-settings", "--ctrl-display", display, "-a", "[gpu:0]/GPUFanControlState=1"))
	nvproc.wait()
	return nvproc.returncode == 0

## TODO: Add multi-GPU support
def getTemperature(display):
	nvproc = subprocess.Popen(("nvidia-settings", "--ctrl-display", display, "-q", "[gpu:0]/GPUCoreTemp", "-t"),stdout=subprocess.PIPE)
	
	line = nvproc.stdout.readline()

	nvproc.wait()
	if nvproc.returncode != 0:
		raise Exception('Failed to obtain temperature value\n')
	temp = int(line)
	return temp

## Returns nvidia-settings return code - non-zero indicates failure
def setGPUFanSpeed(display,fanspeed):
	if fanspeed > 100 or fanspeed < 0:
		raise Exception('Invalid fanspeed: %i' % fanspeed)
	nvproc = subprocess.Popen(("nvidia-settings", "--ctrl-display", display, "-a", "[fan:0]/GPUCurrentFanSpeed=" + str(fanspeed)),stdout=subprocess.PIPE)
	nvproc.wait()
	return nvproc.returncode
	
###############################################################################
## OTHER FUNCTIONS
###############################################################################
	
def usage():
	return """
Usage:
	nvfanx [OPTION] [-r|--rate SECONDS]

Options:
	-h, --help		Show this help
	-q, --quiet		Silence debug messages
	-r, --rate [SECONDS]	Update rate in seconds
	
"""

def parseCommandLine(argv):
	## FIXME: This needs a bit of cleanup; this shouldn't print anything.

	parameters = {
		"quiet":	0,
		"checkrate":	10,
		"help":		0,
		"invalid":	0,
		}
		
	argc = len(argv)
	if argc > 1:
		i = 1
		currentParameter = ""
		while i < argc:
			#sys.stdout.write("Param[%i]: %s\n" % (i, currentParameter))
			#sys.stdout.write(" Argv[%i]: %s\n" % (i, argv[i]))
			if currentParameter == "":
				if argv[i] in ("-h", "--help"):
					parameters["help"] = 1
					return parameters
				elif argv[i] in ("-q", "--quiet"):
					parameters["quiet"] = 1
				elif argv[i] in ("-r", "--rate"):
					currentParameter = "checkrate"
				else:
					sys.stdout.write(usage())
					sys.stderr.write("Unknown option at %i: %s\n" % (i, argv[i]))
					sys.stdout.flush()
					sys.stderr.flush()
					parameters["invalid"] = i
					return parameters
			elif currentParameter == "checkrate":
				try:
					parameters["checkrate"] = int(argv[i])
					currentParameter = ""
				except:
					parameters["invalid"] = i
					sys.stderr.write("Error: Invalid update rate\n")
					return parameters
			else:
				raise Exception('Unknown parameter parsing rule: %s\n' % currentParameter)
			i = i + 1
	
		# If we're branching into here, the user has forgotten to supply
		# a value for a parameter which requires it
		if currentParameter == "checkrate":
			parameters["invalid"] = i
			sys.stderr.write("Error: Expected update rate in seconds\n")
			sys.stderr.flush()
	
	return parameters
	
def onSIGNAL(signum, frame):
	global shouldTerminate
	sys.stdout.write("Recieved signal %i\n" % signum)
	shouldTerminate = True
			
###############################################################################
## MAIN ROUTINE
###############################################################################

# TODO: Single instance support

def main():
	global shouldTerminate
	shouldTerminate = False

	signal.signal(signal.SIGTERM, onSIGNAL)
	signal.signal(signal.SIGINT, onSIGNAL)
	
	display = ":0"
	
	parameters = parseCommandLine(sys.argv)
	if parameters["invalid"]:
		sys.exit(1)
	if parameters["help"]:
		sys.stdout.write(usage())
		sys.stdout.flush()
		sys.exit(0)

	# nVidia driver throttles min speed to 30
	FANSPEED_MIN = 30
	FANSPEED_MAX = 90
	FANSPEED_DELTA = FANSPEED_MAX - FANSPEED_MIN
	TEMPERATURE_MIN = 60
	TEMPERATURE_MAX = 90
	TEMPERATURE_DELTA = TEMPERATURE_MAX - TEMPERATURE_MIN

	# For safety, assume we're overheating
	temperature = 100
	fanspeed = 100

	MAX_ATTEMPTS = 3
	attempts = 0

	firstrun = 1
			
	if not os.geteuid() == 0:
		sys.exit("You need to be root to run this script\n")

	if parameters["quiet"]:
		sys.stdout.write("Running in quiet mode; supressing temperature readouts\n")
	sys.stdout.write("Using checking interval of %i seconds\n" % parameters["checkrate"])

	while not shouldTerminate:
		sys.stdout.flush()
		sys.stderr.flush()
	
		if (attempts > MAX_ATTEMPTS):
			sys.stderr.write("GPU fan control appears to be dead, giving up.\n")
			sys.stdout.flush()
			sys.stderr.flush()
			return 1
	
		if not firstrun:
			time.sleep(parameters["checkrate"])
		else:
			firstrun = 0
		attempts = attempts + 1
	
		try:
			temp = getTemperature(display)
		except:
			sys.stderr.write("Failed to get temperature value, attempt %i of %i\n" % (attempts, MAX_ATTEMPTS))
			continue

		## What should we set the fanspeed to?
		if temp < TEMPERATURE_MIN:
			fanspeed = FANSPEED_MIN
		elif temp > TEMPERATURE_MAX:
			fanspeed = FANSPEED_MAX
		else:
			fanspeed = round((FANSPEED_MIN + (FANSPEED_DELTA *(temp - TEMPERATURE_MIN) / TEMPERATURE_DELTA)))

		## Attempt to enable GPU Fan Control
		try:
			if not getGPUFanControlEnabled(display):
				enableGPUFanControl(display)
		except:
			sys.stderr.write("Failed to set GPU fan control state, attempt %i of %i\n" % (attempts, MAX_ATTEMPTS))
			continue
	
		## Set new fanspeed
		if setGPUFanSpeed(display,fanspeed) != 0:
			sys.stdout.write("Failed to set temperature value, attempt %i of %i\n" % (attempts, MAX_ATTEMPTS))
			continue
	
		## We were successful. Reset the attempt count
		if not parameters["quiet"]:
			sys.stdout.write("Temp: %i -> Fan Speed: %i\n" % (temp, fanspeed))
		attempts = 0
		
	sys.stdout.write("Exiting\n")
	return 0
	
if __name__ == "__main__":
    sys.exit(main())
	
